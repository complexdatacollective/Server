/* eslint-disable */

var createElement = environment.React.createElement;
var bindActionCreators = environment.bindActionCreators;

var MODAL_NEW_NODE = 'MODAL_NEW_NODE';

var MyAmazingInterface = environment.createReactClass({
  handleAddNode: function (node, _, form) {
    if (node) {
      var newNode = Object.assign({}, node, this.props.newNodeAttributes);
      this.props.addNode(newNode);
      form.reset();  // Is this the "react/redux way"?
      this.props.closeModal(MODAL_NEW_NODE);
    }
  },

  render: function() {
     var label = function (node) { return node.nickname; }
     var form = this.props.config.params.form;
     var index = 0;

     return createElement('div', { key: index++, className: "name-generator" },
      [
        createElement('div', { key:index++, className: "name-generator__main" },
          createElement('div', { key: index++, className: "name-generator__nodes" },
            [
              createElement('h1', { key: index++ }, 'My Amazing Interface'),
              createElement(api.elements.NodeList, {
                key: index++,
                network: this.props.activeOriginNetwork,
                label: label
              })
            ]
          )
        ),
        createElement(api.elements.Modal, { key:index++, name: MODAL_NEW_NODE, title: form.title },
          createElement(api.elements.Form, Object.assign({ key: index++, form: form.formName, onSubmit: this.handleAddNode }, form))
        ),
        createElement('button', { key: index++, className: "name-generator__add-person", onClick: function() { this.props.openModal(MODAL_NEW_NODE); }.bind(this) },
          'Add a person'
        )
      ]
    );
  }
});

function mapStateToProps(state) {
  return {
    newNodeAttributes:  api.selectors.session.newNodeAttributes(state),
    activeOriginNetwork: api.selectors.network.activeOriginNetwork(state),
  };
}

function mapDispatchToProps(dispatch) {
  return {
    addNode: bindActionCreators(api.actions.network.addNode, dispatch),
    closeModal: bindActionCreators(api.actions.modal.closeModal, dispatch),
    openModal: bindActionCreators(api.actions.modal.openModal, dispatch),
  };
}

MyAmazingInterface = environment.connect(mapStateToProps, mapDispatchToProps)(MyAmazingInterface);

return {
  config: {
    "name": "My first interview protocol",
    "version": "1.2.3",
    "required": "1.2.4",
    "exportPath": "some/path/here.json",
    "data": {
      "previous": {
        nodes: [
          {
            uid: "previous_1",
            type: "person",
            name: "Fred",
            nickname: "Foo",
          },
          {
            uid: "previous_2",
            type: "person",
            name: "Bob",
            nickname: "Bar",
          },
          {
            uid: "previous_3",
            type: "person",
            name: "Barry",
            nickname: "Baz",
          }
        ]
      },
      "foodNetwork": {
        nodes: [
          {
            type: "food",
            subType: "vegetable",
            name: "tomato",
          },
          {
            type: "food",
            subType: "fruit",
            name: "lime",
          },
          {
            type: "food",
            subType: "fruit",
            name: "bluefruit",
          }
        ]
      }
    },
    "stages": [
      {
        "id": "namegen1",
        "type": {
          "custom": MyAmazingInterface,
        },
        "title": "Name Generator Title 1",
        "params": {
          "nodeType": 'person',
          "panels": [
            'existing',
            'previous'
          ],
          "prompts": [
            {
              id: '6cl',
              title: 'Within the past 6 months, who have you felt close to?',
              nodeAttributes: {
                special_category: 46,
                close_friend: true,
              },
            },
            {
              id: '6su',
              title: "Within the past 6 months, who has been supportive?",
              nodeAttributes: {
                support_friend: true,
              },
            },
            {
              id: '2we',
              title: "Within the past 2 weeks, who has visited",
              nodeAttributes: {
                travel_friend: true,
              },
            },
          ],
          form: {
            title: 'Add a person you know',
            formName: 'closeFriends',
            fields: [
              {
                label: 'Name',
                name: 'name',
                type: 'text',
                placeholder: 'Name',
                required: true,
              },
              {
                label: 'Nickname',
                name: 'nickname',
                type: 'text',
                placeholder: 'Nickname',
                required: true,
              },
            ],
          },
        },
      },
      {
        "id": "namegen2",
        "type": "NameGenerator",
        "title": "Name Generator Title 2",
        "icon": "menu-name-generator",
        "params": {
          "nodeType": 'person',
          "prompts": [
            {
              id: '5be',
              title: "Within the past 6 months, what's the best person you've seen ever?",
              nodeAttributes: {
                fun_times: true,
              },
            },
          ],
          form: {
            title: "Add a person you've seen",
            formName: 'bestPeople',
            fields: [
              {
                label: 'Name',
                name: 'name',
                type: 'text',
                placeholder: 'Name',
                required: true,
              },
              {
                label: 'Nickname',
                name: 'nickname',
                type: 'text',
                placeholder: 'Nickname',
                required: true,
              },
            ],
          },
          "panels": [
            'existing',
            'previous',
          ],
        },
      },
    ],
  },
};
