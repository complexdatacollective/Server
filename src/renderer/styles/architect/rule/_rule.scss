.rule {
  @include flex-inline;
  @include flex-align(left, middle);
  color: var(--text-light);
  position: relative;
  z-index: var(--z-default);

  $drag-button-size: 30px;

  .rule-drag-handle {
    @include flex-inline;
    @include flex-align(center, middle);
    background-color: var(--architect-rule-control);
    color: var(--text-light);
    border: 0;
    border-radius: $drag-button-size;
    width: $drag-button-size;
    height: $drag-button-size;
    font-size: 1em;
    font-weight: bold;
    cursor: pointer;
    margin-right: 10px;
  }

  $delete-button-size: 20px;

  &__delete {
    @include flex-inline;
    @include flex-align(center, middle);
    background-color: var(--architect-rule-delete);
    color: var(--text-light);
    border: 0;
    position: absolute;
    top: 0;
    right: 0;
    transform: translate(50%, -50%);
    border-radius: $delete-button-size;
    width: $delete-button-size;
    height: $delete-button-size;
    font-size: 1.1em;
    margin-left: 20px;
    cursor: pointer;

    &::after {
      display: block;
      content: 'x';
    }
  }

  &__options {
    @include flex-inline;
    @include flex-align(left, middle);
    padding: 0;
    border-radius: 20px;
    height: 40px;
  }

  &__option {
    @include flex-inline;
    @include flex-align(left, middle);
    height: 100%;
    padding: 0 20px;
    position: relative;

    &:first-child {
      border-top-left-radius: 10px;
      border-bottom-left-radius: 10px;
    }

    &:last-child {
      border-top-right-radius: 10px;
      border-bottom-right-radius: 10px;
    }

    &--action {
      background: var(--architect-rule-type);
    }

    &--type {
      background: var(--architect-rule-type);
    }

    &--type + &--attribute {
      padding-left: 40px;

      &::before {
        display: block;
        content: '';
        position: absolute;
        left: -10px;
        transform: translateX(10px);
        z-index: 2;
        top: 0;
        width: 0;
        height: 0;
        border-top: 20px solid var(--architect-rule-attribute);
        border-bottom: 20px solid var(--architect-rule-attribute);
        border-left: 15px solid var(--architect-rule-type);
      }

      &:empty {
        &::before {
          display: none;
        }
      }
    }

    &--attribute {
      background: var(--architect-rule-attribute);
      max-width: 500px;
      transition: max-width var(--animation-easing) var(--animation-duration-standard),
      padding var(--animation-easing) var(--animation-duration-standard);

      &:empty {
        max-width: 0;
        padding: 0;
      }
    }

    &--operator {
      background: var(--architect-rule-operator);
    }

    &--value {
      background: var(--architect-rule-value);
    }
  }

  &--alter {
    .rule__option--type {
      background: var(--architect-rule-type--alter);
    }
  }

  &--ego {
    .rule__option--attribute {
      background: var(--architect-rule-attribute--ego);
    }
  }

  &--edge {
    .rule__option--type {
      background: var(--architect-rule-type--edge);
    }

    .rule__option--attribute {
      background: var(--architect-rule-attribute--edge);

      &::before {
        border-top: 20px solid var(--architect-rule-attribute--edge);
        border-bottom: 20px solid var(--architect-rule-attribute--edge);
        border-left: 15px solid var(--architect-rule-type--edge);
      }
    }
  }
}
