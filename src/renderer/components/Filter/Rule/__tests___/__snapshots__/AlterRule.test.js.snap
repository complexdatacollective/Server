// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AlterRule /> can render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AlterRule
    className=""
    id="123"
    nodeAttributes={
      Object {
        "foo": Array [
          "baz",
          "buzz",
        ],
      }
    }
    nodeTypes={
      Array [
        "foo",
        "bar",
      ]
    }
    onDeleteRule={[Function]}
    onUpdateRule={[Function]}
    options={
      Object {
        "attribute": "",
        "operator": "",
        "type": "",
        "value": "",
      }
    }
    valueInputType={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <sortableHandle(DragHandle) />,
        <div
          className="rule__options"
        >
          <div
            className="rule__option rule__option--type"
          >
            <DropDown
              className={null}
              onChange={[Function]}
              options={
                Array [
                  "foo",
                  "bar",
                ]
              }
              placeholder="{type}"
              value=""
            />
          </div>
        </div>,
        <div
          className="rule__delete"
          onClick={[Function]}
        />,
      ],
      "className": "rule rule--alter",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="rule__option rule__option--type"
            >
              <DropDown
                className={null}
                onChange={[Function]}
                options={
                  Array [
                    "foo",
                    "bar",
                  ]
                }
                placeholder="{type}"
                value=""
              />
            </div>,
            false,
            false,
            false,
          ],
          "className": "rule__options",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <DropDown
                className={null}
                onChange={[Function]}
                options={
                  Array [
                    "foo",
                    "bar",
                  ]
                }
                placeholder="{type}"
                value=""
              />,
              "className": "rule__option rule__option--type",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": null,
                "onChange": [Function],
                "options": Array [
                  "foo",
                  "bar",
                ],
                "placeholder": "{type}",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          false,
          false,
          false,
        ],
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "rule__delete",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <sortableHandle(DragHandle) />,
          <div
            className="rule__options"
          >
            <div
              className="rule__option rule__option--type"
            >
              <DropDown
                className={null}
                onChange={[Function]}
                options={
                  Array [
                    "foo",
                    "bar",
                  ]
                }
                placeholder="{type}"
                value=""
              />
            </div>
          </div>,
          <div
            className="rule__delete"
            onClick={[Function]}
          />,
        ],
        "className": "rule rule--alter",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="rule__option rule__option--type"
              >
                <DropDown
                  className={null}
                  onChange={[Function]}
                  options={
                    Array [
                      "foo",
                      "bar",
                    ]
                  }
                  placeholder="{type}"
                  value=""
                />
              </div>,
              false,
              false,
              false,
            ],
            "className": "rule__options",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <DropDown
                  className={null}
                  onChange={[Function]}
                  options={
                    Array [
                      "foo",
                      "bar",
                    ]
                  }
                  placeholder="{type}"
                  value=""
                />,
                "className": "rule__option rule__option--type",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": null,
                  "onChange": [Function],
                  "options": Array [
                    "foo",
                    "bar",
                  ],
                  "placeholder": "{type}",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            false,
            false,
            false,
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "rule__delete",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
